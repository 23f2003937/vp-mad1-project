1. Admin User Not Created Automatically
❗ You do not create an admin user in code.

✅ Required: Admin should exist automatically when the database is created.

💡 Fix: In your database setup or seeding script, add:

python
Copy
Edit
if not User.query.filter_by(username='admin').first():
    admin = User(username='admin', is_admin=True, password=hashed_pw)
    db.session.add(admin)
    db.session.commit()
2. Database Might Be Manually Created
❗ A parking_management.db file is present, suggesting it was manually created.

✅ Required: Must be created programmatically using models (db.create_all()), not with DB Browser or GUI tools.

💡 Fix: Ensure db.create_all() is called in a setup script or app initialization (with app.app_context(): db.create_all()), and remove the .db file from your repo.

3. Reservation Cost Field Not Set in One Route
❗ In the form-based booking, you don’t assign the cost per unit time to the reservation.

✅ Required: All reservations must store the price per unit time for billing.

💡 Fix: Add:

python
Copy
Edit
reservation.parking_cost_per_unit_time = parking_lot.price
in the form submission route just like in the quick-booking route.

4. Parking Lot Deletion Logic is Incomplete
❗ You only check if occupied spots (status='O') exist before deleting a parking lot.

✅ Required: You should not delete a lot if any spot is reserved (status='R') either.

💡 Fix: Update the check to prevent deletion if any spot is not available.

5. No Duplicate User Validation
❗ You rely on the database to reject duplicate usernames/emails (via unique=True), but don’t catch or handle these in the registration form.

✅ Best Practice: Catch duplicates in your form and show user-friendly errors.

💡 Fix: Add custom WTForms validators to check uniqueness before submitting.

6. Manual Deletion of Parking Spots Has a Minor Logic Issue
❗ When decreasing spots, your deletion logic may remove the wrong spots if spot status order is irregular.

✅ Required: Safely remove the last-added available spots only.

💡 Fix: Instead of using offset(), sort spots by number and delete the latest available ones.